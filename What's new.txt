--------11/01/2023: Rev 1.3--------
######################### Improved PRG Interleaving! #########################
	The script has become more flexible by introducing import parameters. They work
	much and such the same as append, only they load the data to the start of the file
	as opposed to slapping it on the end. This allows games like Saturday Night Slam-Masters
	to have all it's program data properly read. Admittedly a bit slap dash but should get the job
	done. Let me know if any bugs spring up
	EXAMPLE:

	#Import this data first before we interleave anything
	prg_import = ["mbe_23e.8f",0x80000]
	import_swapendian = 2 #Swap the endian. 2 Indicates a length of 16-bits, so every 2 bytes

	######################### NEWLY SUPPORTED GAMES #########################
	---Graphics Data ----
	ringdest - Ring of Destruction/SlamMasters 2

	---Program Data ----	
	forgottn - Forgotten Worlds
	
	---Graphics and Program Data ----
	3countb - 3 Count Bout/Fire Suplex
	aodk - Aggressors of Dark Kombat
	punisher - The Punisher
	slammast - Saturday Night SlamMasters

--------03/10/2022: Rev 1.21--------
	It seems i accidentally forgot to properly setup gowcaizr properly.
	The resuource file has been fixed and should thus work now


--------03/10/2022: Rev 1.2--------
######################### Program Data interleaving! #########################
	The script has branched out from just Graphics! It can now be used
	as a general purpose interleaver for Program data, thus making it
	useful for editing the actual code/data of older titles. The res file
	just needs to know a couple of things for this to work. We can have a
	look at what these are by using Asura Busters(asurabus) as an example
	
		#Intended system this res file is needed for
		System = "Fuukifg3"

		#Define all the names of Program data here
		prg_prefix = ["pgm3.u1", "pgm2.u2","pgm1.u3","pgm0.u4"]
		#Here we make an array to store every "group" of ROMs to interleave between
		#In this case, we interleave using all 4 files, so only 1 group is defined
		prg_groupsize = [4]
		#How many Bytes to interleave between groups
		#This results in the interleaved data taking a byte from the first file, then
		#the second, third and finally fourth. Back to the first, and so on and so on
		#until all the program data is read
		prg_grabsize = [1]
		#How big each group is
		#Define an individual ROM size here. Due to how interleaving works, ya can just
		#use the number of bytes of any of the program ROMs
		prg_romsize = [524288]
		
	You can also define whether to swap the Endian of the data as it's exported, thus letting
	ya edit the data as if the game itself was reading it! Make reverse engineering in Ghidra
	simpler as well. You can define it like this
	
		swapendian = 2 #Size of Endian, or how many Bytes to flip apiece
		#EXAMPLE: 2 is common, so a value of 0x4039 would be swapped to 0x3940
		#NOTE: Some games interleave the machine code but leave raw data alone. Comment out the Swapendian should you need to edit one or the other

	Nighty Warriors and Avengers in Galactic Storm make use of this
	You can also use the Stitcher to append PRG Data together, like in the case of garoup
	
		#Slap the rest of the data on there for ease of use
		prg_append =  ["proto_253-p1.p1", 0x100000, "proto_253-p2.p2", 0x400000]
		append_swapendian = 2
	
	The stitcher reads what file to append, how big it is, before incrementing by 2, functionally reading the next
	file in the table when the first one is done. The append_swapendian variable is there to flip the data so it
	ya can read it as it would be seen in the game itself
	It has also occured to me the stitcher can simply be used to swap the endian of 1 PRG ROM for ease of editing, 
	so hey that's cool!
	


######################### QOL: File Validation #########################
	Small thing to hopefully improve the user experience of the stitcher. When you define a game, the stitcher now
	checks your roms folder for the game. If it doesn't exist, make a folder for it. If a folder does exist, it checks
	if any GFX/PRG ROM to be read is present, as well as the interleaved data folder to check if the interleaved data exists.
	This should make it more clear if you can interleave/de-interleave data

	
	######################### NEWLY SUPPORTED GAMES #########################
	---Graphics Data ----
	avsp = Alien VS Predator

	---Program Data ----	
	asurabus - Asura Buster
	avengrgs - Avengers in Galactic Storm
	btlkroad - Battle K Road
	dankuga - Dan-Ku-Ga
	dinorex - Dino Rex
	ffight - Final Fight
	garoup - Garou: Mark of the Wolves (prototype)
	jchan - Jackie Chan: The Kung Fu Master	mmaulers - Monster Maulers
	mwarr - Mighty Warriors
	sf - Street Fighter
	sf2 - Street Fighter 2: The World Warrior
	strider - Strider
	
	---Graphics and Program Data ----
	dino - Caddilacs and Dinosaurs
	ghouls - Ghouls 'n Ghosts
	knights - Knights of the Round

--------21/09/2022: Rev 1.1--------
CPS1 SUPPORT!
	After bashing against that wall for a while, the stitcher
	is now compatible with most CPS1 Games! There are fringe cases
	like Forgotten Worlds where the Stitcher isn't suitable, but by
	and large still usable with the majority of CPS1 games i've seen.
	The only real distinction between adding a CPS1 game as opposed to
	CPS2 is that there are a couple new vars to accomodate varying Group
	Sizes, and how many bytes to interleave per group
	For example, Final Fight is setup like this:
	
	gfx_prefix = ["ff-5m.7a", "ff-7m.9a", "ff-1m.3a", "ff-3m.5a"]

	group_size = [4]
	group_collec_size = [2]

	#Total size of each ROM group
	rsize0 = 2 << 18 #524288 bytes, or 512KB
	rsize1 = 2 << 19 #1048576 bytes, or 1MB
	rsize2 = 2 << 20 #2097152 bytes, or 2MB
	rsize3 = 2 << 21 #4194304 bytes, or 4MB
	rsize4 = 2 << 22 #8388608 bytes, or 8MB
	gfx_romsize = [rsize0]
	
	This will probably be adjusted at some point to accomodate games like
	Forgotten Worlds, but should still prove useful, i hope.
	To see the size of groups for ya game, make sure to check Mames cps1.cpp

NEO-GEO: PREFIX_OVERRIDE
	In order to accomodate Samurai Shodown 1, adjusted the code
	so now you can define a prefix_override array to read files of
	varying cx prefixes. In the case of Samsho 1, it's prefix_override
	looks like this

	prefix_override = [1,2,3,4,51,61]

	This indicates to the stitcher to read, in order,
	c1.c1
	c2.c2
	c3.c3
	c4.c4
	c51.c5
	c61.c6

NEWLY SUPPORTED GAMES
	ffight - Final Fight
	ghouls - Ghouls 'N Ghosts
	knights - Knights of the Round
	samsho - Samurai Shodown/Samurai Spirits
	sf2 - Street Fighter 2: The World Warrior
	sfa - Street Fighter Alpha
	strider - Strider
